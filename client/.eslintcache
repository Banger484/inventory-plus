[{"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\index.js":"1","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\App.js":"2","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\reportWebVitals.js":"3","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\themes.js":"4","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\pages\\Home.js":"5","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\auth.js":"6","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Admin\\ProductAdmin.js":"7","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Admin\\AdminDashboard.js":"8","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Admin\\UsersAdmin.js":"9","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Login.js":"10","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Signup.js":"11","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\AcceptInvite.js":"12","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\queries.js":"13","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\remodeledData.js":"14","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\UserDashboard.js":"15","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Roster.js":"16","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Settings.js":"17","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\AddUser.js":"18","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderFulfillment.js":"19","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\AddProduct.js":"20","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderDashboard.js":"21","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\ProductDashboard.js":"22","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderSell.js":"23","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderPurchase.js":"24","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderReceived.js":"25","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderGuide.js":"26","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\StockGuide.js":"27","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\FullReport.js":"28","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\ProductReport.js":"29","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\ReportingDashboard.js":"30","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\MonthlyAnalysis.js":"31","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Dashboard.js":"32","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\Charts.js":"33","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\ProductGuide.js":"34","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Navbar.js":"35","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Header.js":"36","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\mutations.js":"37","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\logout.js":"38","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Tools\\DropBox.js":"39","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\orderDate.js":"40","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\OrderDetails.js":"41","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\filter.js":"42","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderModal.js":"43","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\ProductList.js":"44","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderList.js":"45","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\dummyData.js":"46","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Icon.js":"47","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\ProductDetails.js":"48","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\Charts\\SalesByMonth.js":"49","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\Charts\\StockPie.js":"50","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\translation\\translator.js":"51","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Table\\index.js":"52","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\translation\\translationLibrary.js":"53"},{"size":500,"mtime":1653612002944,"results":"54","hashOfConfig":"55"},{"size":3567,"mtime":1656438217850,"results":"56","hashOfConfig":"55"},{"size":389,"mtime":1653612002961,"results":"57","hashOfConfig":"55"},{"size":8175,"mtime":1656444213413,"results":"58","hashOfConfig":"55"},{"size":9935,"mtime":1656444581276,"results":"59","hashOfConfig":"55"},{"size":1044,"mtime":1654473804542,"results":"60","hashOfConfig":"55"},{"size":1891,"mtime":1656005286776,"results":"61","hashOfConfig":"55"},{"size":1010,"mtime":1656005286773,"results":"62","hashOfConfig":"55"},{"size":1889,"mtime":1656005286779,"results":"63","hashOfConfig":"55"},{"size":3500,"mtime":1656173473955,"results":"64","hashOfConfig":"55"},{"size":7286,"mtime":1656173583784,"results":"65","hashOfConfig":"55"},{"size":2924,"mtime":1656173583772,"results":"66","hashOfConfig":"55"},{"size":6819,"mtime":1656438217979,"results":"67","hashOfConfig":"55"},{"size":10415,"mtime":1656438217983,"results":"68","hashOfConfig":"55"},{"size":1447,"mtime":1656173583788,"results":"69","hashOfConfig":"55"},{"size":1357,"mtime":1656438331317,"results":"70","hashOfConfig":"55"},{"size":2190,"mtime":1656438331320,"results":"71","hashOfConfig":"55"},{"size":1135,"mtime":1656173583775,"results":"72","hashOfConfig":"55"},{"size":3179,"mtime":1656173583722,"results":"73","hashOfConfig":"55"},{"size":3614,"mtime":1656438217898,"results":"74","hashOfConfig":"55"},{"size":3298,"mtime":1656173583718,"results":"75","hashOfConfig":"55"},{"size":1042,"mtime":1656173583758,"results":"76","hashOfConfig":"55"},{"size":6161,"mtime":1656438331303,"results":"77","hashOfConfig":"55"},{"size":7960,"mtime":1656438331300,"results":"78","hashOfConfig":"55"},{"size":3817,"mtime":1656173583744,"results":"79","hashOfConfig":"55"},{"size":1184,"mtime":1656173583731,"results":"80","hashOfConfig":"55"},{"size":5319,"mtime":1656438331306,"results":"81","hashOfConfig":"55"},{"size":3583,"mtime":1656438298877,"results":"82","hashOfConfig":"55"},{"size":1597,"mtime":1656173473916,"results":"83","hashOfConfig":"55"},{"size":1909,"mtime":1656438217930,"results":"84","hashOfConfig":"55"},{"size":2532,"mtime":1656438217923,"results":"85","hashOfConfig":"55"},{"size":2669,"mtime":1656173583697,"results":"86","hashOfConfig":"55"},{"size":5551,"mtime":1656438298863,"results":"87","hashOfConfig":"55"},{"size":429,"mtime":1654473804494,"results":"88","hashOfConfig":"55"},{"size":1143,"mtime":1656173583710,"results":"89","hashOfConfig":"55"},{"size":1085,"mtime":1656444644720,"results":"90","hashOfConfig":"55"},{"size":6325,"mtime":1656438217975,"results":"91","hashOfConfig":"55"},{"size":253,"mtime":1656005286835,"results":"92","hashOfConfig":"55"},{"size":1780,"mtime":1656438331312,"results":"93","hashOfConfig":"55"},{"size":352,"mtime":1656005286864,"results":"94","hashOfConfig":"55"},{"size":563,"mtime":1655599432448,"results":"95","hashOfConfig":"55"},{"size":149,"mtime":1656005286856,"results":"96","hashOfConfig":"55"},{"size":917,"mtime":1654473804471,"results":"97","hashOfConfig":"55"},{"size":2717,"mtime":1656438331309,"results":"98","hashOfConfig":"55"},{"size":2345,"mtime":1656438331296,"results":"99","hashOfConfig":"55"},{"size":1779,"mtime":1656438217935,"results":"100","hashOfConfig":"55"},{"size":2578,"mtime":1656173583706,"results":"101","hashOfConfig":"55"},{"size":1154,"mtime":1656438217927,"results":"102","hashOfConfig":"55"},{"size":2094,"mtime":1656438875840,"results":"103","hashOfConfig":"55"},{"size":1761,"mtime":1656438217916,"results":"104","hashOfConfig":"55"},{"size":701,"mtime":1656438217991,"results":"105","hashOfConfig":"55"},{"size":1302,"mtime":1656438217944,"results":"106","hashOfConfig":"55"},{"size":2271,"mtime":1656438217987,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i40bl9",{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"147"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"147"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"147"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"147"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"147"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"147"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"147"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"147"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"147"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"147"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"147"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"147"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"147"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"147"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"147"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"147"},"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\index.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\App.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\reportWebVitals.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\themes.js",["232"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\pages\\Home.js",["233","234"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\auth.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Admin\\ProductAdmin.js",["235","236"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Admin\\AdminDashboard.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Admin\\UsersAdmin.js",["237","238","239","240"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Login.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Signup.js",["241","242","243","244"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\AcceptInvite.js",["245","246","247"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\queries.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\remodeledData.js",["248"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\UserDashboard.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Roster.js",["249","250","251","252","253"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\Settings.js",["254","255","256","257","258"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\AddUser.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderFulfillment.js",["259","260"],"// Imports custom css file and requires all dependant files\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { GET_OPEN_SALES } from \"../../utils/queries\";\nimport { groupSales } from \"../../utils/remodeledData\";\nimport orderDate from \"../../utils/orderDate\";\nimport { FULFILL_ITEMS } from \"../../utils/mutations\";\nimport { useState } from \"react\";\nimport { stringifyProperties } from \"../../utils/filter\";\n\nexport default function OrderFulfillment({ enterpriseId }) {\n\n    const [fulfillSale, { error }] = useMutation(FULFILL_ITEMS)\n    const [date, setDate] = useState( orderDate())\n    const [searchTerm,setSearchTerm] = useState(\"\")\n    const { loading: openSaleItemsLoading, data: openSaleItemsData, refetch } = useQuery(GET_OPEN_SALES, {\n        variables: { enterpriseId: enterpriseId }\n    })\n    if (openSaleItemsData) {\n        refetch()\n    }\n\n    const handleDateChange = (e)=>{\n        console.log(e)\n        setDate(e.target.value)\n    }\n\n    const openSalesGroup = openSaleItemsLoading ? [] : groupSales(openSaleItemsData.getOpenSales)\n    const handleFulfill = (e) => {\n        const index = e.target.dataset.index;\n        const variables = {\n            enterpriseId: enterpriseId,\n            saleNumber: parseInt(e.target.dataset.orderNumber),\n            fulfillmentDate: date,\n        }\n        fulfillSale({ variables })\n        refetch()\n\n    }\n\n    if(openSaleItemsLoading){\n        return(\n            <div>Loading...</div>\n        )\n    }\n\n    const searchedRows = openSalesGroup.filter(p=>{\n        return stringifyProperties(p).toLowerCase().includes(searchTerm.toLowerCase())\n    })\n\n\n\n    return (\n        <div className=\"big-center-flex\">\n            <div className=\"table-top rec-order-tt\">\n            <h1>Fulfill Sale</h1>\n            </div>\n\n            <input onChange={handleDateChange} type=\"date\"/>\n            <div className=\"search-bar\">\n                <input onChange={(e)=>setSearchTerm(e.target.value)}/>\n            </div>\n            {openSaleItemsLoading\n                ? <h2>Loading</h2>\n                : <table className=\"product-list-table\"><thead>\n                    <tr>\n                        <th>Sale #</th>\n                        <th>Sale Date</th>\n                        <th>Buyer</th>\n                        <th>Items</th>\n                        <th>Fulfill!</th>\n                    </tr>\n                </thead>\n                    <tbody>\n                        {openSalesGroup.map((order, index) => {\n                            return (<tr  className={searchedRows.includes(order)?\"\":\"hide\"}  key={index} data-order={order.number}>\n                                <td>{order.number}</td>\n                                <td>{orderDate(order.date)}</td>\n                                <td>{order.buyer}</td>\n                                <td>{order.itemList}</td>\n                                <td><button data-order-number={order.number} data-index={index} onClick={handleFulfill}>Receive!</button></td>\n                            </tr>\n                            )\n                        })}\n\n                    </tbody>\n                </table>\n            }\n\n        </div>\n    )\n}",["261","262"],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\AddProduct.js",["263","264"],"import './AddProduct.css'\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_PRODUCT } from '../../utils/mutations'\nimport ProductList from './ProductList';\nimport { DropBox } from '../Tools/DropBox';\nimport Auth from '../../utils/auth';\n\nexport default function AddProduct (props) {\n    const [imageKey,setImageKey] = useState(null)\n    const enterprise = Auth.getProfile().data.enterprise\n    const [ formData, setFormData ] = useState({\n        sku: '',\n        name: '',\n        description: '',\n        msrp: 0,\n        category: '',\n        notes: '',\n    })\n    \n\n    const [addProduct, { error, data }] = useMutation(ADD_PRODUCT)\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setFormData({ ...formData, [name]: value });\n    }\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        const inputData = { ...formData}\n\n        inputData.msrp = parseInt(inputData.msrp)\n\n\n        try {\n            const variables = { ...inputData, enterprise }\n            if (imageKey){\n                variables.imageKey = imageKey\n            }\n            console.log(variables)\n            const { data } = await addProduct({\n                variables\n            })\n        } catch (err) {\n            console.error(err);\n        }\n        setImageKey(null)\n        setFormData({\n            sku: '',\n            name: '',\n            description: '',\n            msrp: 0,\n            category: '',\n            notes: '',\n        })\n    }\n    return (<>\n    \n\n        {/* <div className=\"table-top apl-top\">\n            <h1>Product Guide</h1>\n        </div> */}\n    <div className='add-product-grid'>\n            <form  onSubmit={handleFormSubmit}>\n                <div className='add-product-header'>\n                    <h1>Add Product</h1>\n                </div>\n                <div className='add-product-form'>\n                <label htmlFor='sku'>SKU:<input name='sku' value={formData.sku} type='text' onChange={handleInputChange}/></label>\n                <label htmlFor='name'>Product Name:<input name='name' value={formData.name} type='text' onChange={handleInputChange}/></label>\n                <label htmlFor='description'>Desc.:<input name='description' value={formData.description} type='text' onChange={handleInputChange}/></label>\n                <label htmlFor='msrp'>MSRP:<input name='msrp' value={formData.msrp} type='number' onChange={handleInputChange}/></label>\n                <label htmlFor='category'>Category:<input name='category' value={formData.category} type='text' onChange={handleInputChange}/></label>\n                <label htmlFor='notes'>Notes:<input name='notes' value={formData.notes} type='text' onChange={handleInputChange}/></label>\n                </div>\n    {/* <input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" onChange={()=>{}}/>\n    <label id=\"\" className=\"button select-btn\" htmlFor=\"fileElem\">Select some files</label> */}\n                <DropBox imageKey={imageKey} setImageKey={setImageKey}/>\n                <input id='add-product-submit' type='submit' value='Submit' />\n                {error && (\n          <div className=\"col-12 my-3 bg-danger text-white p-3\">\n            Something went wrong...\n          </div>\n        )}\n            </form>\n        <div className='add-product-list'>\n        {/* <img src=\"/images/305746d03021662a7f453c223d81e707\"/> */}\n        <ProductList\n          products={props.products}\n          productsRefetch={props.productsRefetch}\n        />\n        </div>\n    </div>\n    </>  \n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderDashboard.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\ProductDashboard.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderSell.js",["265","266","267"],"import { useQuery, useMutation } from \"@apollo/client\"\nimport { useState } from 'react'\nimport { GET_CURRENT_STOCKS } from \"../../utils/queries\";\nimport { SELL_ITEMS } from '../../utils/mutations'\nimport { generateSalesTableData, groupItems } from \"../../utils/remodeledData\";\nimport orderDate from \"../../utils/orderDate\";\nimport './Order.css'\nimport { stringifyProperties } from \"../../utils/filter\";\n\nimport OrderModal from \"./OrderModal\";\n\nexport default function OrderSell (props) {\n\n    const [openModal, setOpenModal] = useState(false)\n    const [date, setDate] = useState( orderDate())\n    const [saleNumber,setSaleNumber] = useState(props.enterprise.getEnterpriseById.saleNumber)\n\n    const [buyer,setBuyer] = useState(\"Not specified\")\n    const [sellItems, { error }] = useMutation(SELL_ITEMS)\n\n    const { loading: currentStocksLoading, data: currentStocksData, refetch } = useQuery(GET_CURRENT_STOCKS, {\n        variables: { enterpriseId: props.enterpriseId}\n    })\n\n    let currentStocksGroups\n    let tableData = []\n    const [searchTerm,setSearchTerm] = useState(\"\")\n    \n    if(!currentStocksLoading ){\n        refetch()\n        currentStocksGroups = groupItems(currentStocksData.getCurrentStocks)\n        tableData = generateSalesTableData(props.orderGuide, currentStocksGroups)\n    }\n\n\n    const handleSupplierChange = (e) => {\n        setBuyer(e.target.value)\n    }\n\n    const [quantities,setQuantities] = useState({})\n\n    const handleInputChange = (e) => {\n        const index = e.target.dataset.index\n        let val;\n        if(e.target.name===\"newSaleQty\"){\n            val = parseInt(e.target.value)\n        }else{\n            val = parseFloat(e.target.value)\n        }\n        const newQuantities = {...quantities};\n        if (!newQuantities[e.target.dataset.pid]){\n            newQuantities[e.target.dataset.pid] = {}\n        }\n        newQuantities[e.target.dataset.pid][e.target.name] = val\n        setQuantities(newQuantities)\n    }\n\n    const handleDateChange = (e)=>{\n        console.log(e)\n        setDate(e.target.value)\n    }\n\n    const handleSubmit = async () => {\n        console.log(quantities)\n        const filterTableData = tableData.filter(data => quantities?.[data._id]?.newSaleQty > 0)\n        \n        try {\n            await filterTableData.forEach(async (product) => {\n                const variables = {\n                    quantity: quantities[product._id].newSaleQty,\n                    productId: product._id,\n                    saleId:saleNumber,\n                    salesPrice: quantities[product._id].newSalePricePerUnit,\n                    saleDate: date,\n                    buyer,\n                    enterpriseId: props.enterpriseId\n                }\n                console.log(variables)\n                await sellItems({\n                    variables\n                })\n\n            })\n            setOpenModal(true)\n            setSaleNumber(saleNumber+1)\n            setQuantities({})\n        } catch (err) {\n            console.error(err);\n        }}\n\n        const searchedRows = tableData.filter(p=>{\n            return stringifyProperties(p).toLowerCase().includes(searchTerm.toLowerCase())\n        })\n\n    return (\n        <div>\n            {openModal && <OrderModal orderNumber={saleNumber-1} closeModal={setOpenModal}/>}\n            <div className=\"table-top\">\n                <h1>Sell Order</h1>\n                <input type='text' onChange={handleSupplierChange} placeholder=\"Enter Buyer\"/>\n                <input onChange={handleDateChange} type=\"date\"/>\n            </div>\n            <div className=\"search-bar\">\n                <input onChange={(e)=>setSearchTerm(e.target.value)}/>\n            </div>\n            <table className='order-table'>\n                <thead>\n                    <tr className=\"order-header\">\n                        <th>Image</th>\n                        <th>SKU</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>MSRP</th>\n                        <th>Category</th>\n                        <th>Notes</th>\n                        <th>Current</th>\n                        <th>Price</th>\n                        <th>Qty</th>\n                    </tr>\n                </thead>\n                    <tbody>\n                    {tableData.map((product, index) => {\n                        return (\n                        <tr className={searchedRows.includes(product)?\"\":\"hide\"}  data-pid={product._id} key={index}>\n                            <td className=\"td-2\">{product.imageKey?(<img className='table-image' src={`/images/${product.imageKey}`}/>):null}</td>\n                            <td className=\"td-1\" data-pid={product._id}>{product.sku}</td>\n                            <td className=\"td-3\" data-pid={product._id}>{product.name}</td>\n                            <td className=\"td-4\" data-pid={product._id}>{product.description}</td>\n                            <td className=\"td-1\" data-pid={product._id}>${product.msrp}</td>\n                            <td className=\"td-2\" data-pid={product._id}>{product.category}</td>\n                            <td className=\"td-4\" data-pid={product._id}>{product.notes}</td>\n                            <td className=\"td-1\" data-pid={product._id}>{product.current}</td>\n                            <td className=\"td-1\" data-pid={product._id}><input data-pid={product._id} className=\"td-1\" step={0.01} data-index={index} name=\"newSalePricePerUnit\" type=\"number\" min=\"0\" onChange={handleInputChange}  value={quantities?.[product._id]?.newSalePricePerUnit||\"\"}></input></td>\n                            <td className=\"td-1\" ><input data-pid={product._id} className=\"td-1\" data-index={index} name=\"newSaleQty\" type=\"number\" min=\"0\" max={product.current} onChange={handleInputChange} value={quantities?.[product._id]?.newSaleQty||0}/></td>\n                        </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n                <div>\n                <button className=\"order-submit\" type=\"submit\" onClick={handleSubmit}>Submit Order</button>\n                </div>\n        </div>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderPurchase.js",["268","269"],"import { useQuery, useMutation } from \"@apollo/client\"\nimport { useState } from 'react'\nimport { GET_CURRENT_STOCKS, GET_INCOMING_ITEMS, GET_STOCK_GUIDE } from \"../../utils/queries\";\nimport { BUY_ITEMS } from '../../utils/mutations'\nimport { groupItems, generatePurchaseTableData } from \"../../utils/remodeledData\";\nimport orderDate from \"../../utils/orderDate\";\nimport './Order.css'\n\nimport OrderModal from \"./OrderModal\";\nimport { stringifyProperties } from \"../../utils/filter\";\n\nexport default function OrderPurchase (props) {\n    const [openModal, setOpenModal] = useState(false)\n    const [date, setDate] = useState( orderDate())\n    const [orderNumber,setOrderNumber] =useState(props.enterprise.getEnterpriseById.orderNumber)\n\n    const [supplier,setSupplier] = useState(\"Not specified\")\n\n    const [buyItems, { error }] = useMutation(BUY_ITEMS)\n\n    const { loading: currentStocksLoading, data: currentStocksData, refetch: currentRefetch } = useQuery(GET_CURRENT_STOCKS, {\n        variables: { enterpriseId: props.enterpriseId}\n    })\n    const { loading: incomingItemsLoading, data: incomingItemsData, refetch: incomingRefetch } = useQuery(GET_INCOMING_ITEMS, {\n        variables: { enterpriseId: props.enterpriseId}\n    })\n    const { loading: parsLoading, data: parsData, refetch: parsRefetch} = useQuery(GET_STOCK_GUIDE, {\n        variables: { enterpriseId: props.enterpriseId}\n    })\n\n    let currentStocksGroups\n    let incomingItemsGroups\n    let tableData = []\n    let pars\n    const [searchTerm,setSearchTerm] = useState(\"\")\n    \n    if(!currentStocksLoading && !incomingItemsLoading && !parsLoading){\n        incomingRefetch()\n        currentRefetch()\n        parsRefetch()\n        currentStocksGroups = groupItems(currentStocksData.getCurrentStocks)\n        incomingItemsGroups = groupItems(incomingItemsData.getOrderedItems)\n        tableData = generatePurchaseTableData(props.orderGuide, currentStocksGroups, incomingItemsGroups)\n        pars = parsData.getStockGuide\n\n    }\n    // console.log('pars',pars);\n    const getPar = (id) => {\n        const parQty = pars.filter(par => id === par.product)\n        if (parQty.length === 0) {\n            return 'N/A'\n        }\n        return parQty[0].requiredStock;\n    }\n\n    const suggestQty = (id, current, incoming) => {\n        const parVal = getPar(id)\n        const suggested = parVal - current - incoming\n        console.log(suggested);\n        if (parVal === 'N/A') {\n            return 'N/A'\n        }\n        if (suggested < 0) {\n            return 0\n        }else {\n            return suggested\n        }\n        \n        \n    }\n\n    const handleSupplierChange = (e) => {\n        setSupplier(e.target.value)\n    }\n\n    const [quantities,setQuantities] = useState({})\n\n    const handleInputChange = (e) => {\n        let val;\n        if(e.target.name===\"newOrderQty\"){\n            val = parseInt(e.target.value)\n        }else{\n            val = parseFloat(e.target.value)\n        }\n        const newQuantities = {...quantities};\n        if (!newQuantities[e.target.dataset.pid]){\n            newQuantities[e.target.dataset.pid] = {}\n        }\n        newQuantities[e.target.dataset.pid][e.target.name] = val\n        setQuantities(newQuantities)\n    }\n\n    const handleDateChange = (e)=>{\n        setDate(e.target.value)\n        \n    }\n    \n\n    const handleSubmit = async () => {\n\n        const filterTableData = tableData.filter(data => quantities?.[data._id]?.newOrderQty > 0)\n\n        try {\n            filterTableData.forEach(async (product) => {\n                console.log(\"this is the input\",product.newOrderCostPerUnit)\n                console.log(\"this is the quantities\",)\n                const variables = {\n                    quantity: quantities[product._id].newOrderQty,\n                    productId: product._id,\n                    orderNumber,\n                    cost: quantities[product._id].newOrderCostPerUnit,\n                    purchaseDate: date,\n                    supplier,\n                    enterpriseId: props.enterpriseId\n                }\n                console.log(product);\n                console.log(variables)\n                await buyItems({\n                    variables\n                })\n\n            })\n            setOpenModal(true);\n            setOrderNumber(orderNumber+1)\n            setQuantities({})\n        } catch (err) {\n            console.error(err);\n        }\n\n    }\n\n    const searchedRows = tableData.filter(p=>{\n        return stringifyProperties(p).toLowerCase().includes(searchTerm.toLowerCase())\n    })\n\n    return (\n        <div>\n            {openModal && <OrderModal orderNumber={orderNumber} closeModal={setOpenModal}/>}\n            <div className=\"table-top purchase-order-header\">\n                <h1>Purchase Order</h1>\n                <input type='text' onChange={handleSupplierChange} placeholder=\"Please enter supplier's name\"/>\n                <input onChange={handleDateChange} type=\"date\"/>\n            </div>\n            <div className=\"search-bar\">\n                <input onChange={(e)=>setSearchTerm(e.target.value)}/>\n            </div>\n            <table className='order-table'>\n                <thead>\n                    <tr className=\"order-header\">\n                        <th>Image</th>\n                        <th>SKU</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>MSRP</th>\n                        <th>Category</th>\n                        <th>Par</th>\n                        <th>Current</th>\n                        <th>Incoming</th>\n                        <th>Suggest</th>\n                        <th>Cost</th>\n                        <th>Order Qty</th>\n                    </tr>\n                </thead>\n                    <tbody>\n                    {tableData.map((product, index) => {\n                        \n                        return (\n                        <tr className={searchedRows.includes(product)?\"\":\"hide\"} data-pid={product._id} key={index}>\n                            <td className=\"td-2\">{product.imageKey?(<img className='table-image' src={`/images/${product.imageKey}`}/>):null}</td>\n                            <td className=\"td-1\" data-pid={product._id}>{product.sku}</td>\n                            <td className=\"td-3\" data-pid={product._id}>{product.name}</td>\n                            <td className=\"td-3\" data-pid={product._id}>{product.description}</td>\n                            <td className=\"td-1\" data-pid={product._id}>${product.msrp}</td>\n                            <td className=\"td-2\" data-pid={product._id}>{product.category}</td>\n                            <td className=\"td-1\" data-pid={product._id}>{getPar(product._id)}</td>\n                            <td className=\"td-1\" data-pid={product._id}>{product.current}</td>\n                            <td className=\"td-1\" data-pid={product._id}>{product.incoming}</td>\n                            <td className=\"td-1\" data-pid={product._id}>{suggestQty(product._id, product.current, product.incoming)}</td>\n                            <td className=\"td-1\" data-pid={product._id}>\n                                <input className=\"td-1\"  data-pid={product._id} data-index={index} name=\"newOrderCostPerUnit\" type=\"number\" step=\".01\" min=\"0\" onChange={handleInputChange} value={quantities?.[product._id]?.newOrderCostPerUnit||\"\"} />\n                            </td>\n                            <td className=\"td-1\" ><input  data-pid={product._id} className=\"td-1\" data-index={index} name=\"newOrderQty\" type=\"number\" min=\"0\" onChange={handleInputChange}  value={quantities?.[product._id]?.newOrderQty||0}/></td>\n                        </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n                <div>\n                <button className=\"order-submit\" type=\"submit\" onClick={handleSubmit}>Submit Order</button>\n                </div>\n        </div>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderReceived.js",["270","271","272"],"import { useMutation, useQuery } from \"@apollo/client\"\nimport { groupOrders } from \"../../utils/remodeledData\";\nimport orderDate from \"../../utils/orderDate\";\nimport { RECEIVE_ITEMS } from \"../../utils/mutations\";\nimport \"./orderReceived.css\"\nimport { useState } from \"react\";\nimport { GET_INCOMING_ITEMS } from '../../utils/queries'\nimport { OrderDetails } from \"../Reporting/OrderDetails\";\nimport { t } from \"../../utils/translation/translator\";\nimport { stringifyProperties } from \"../../utils/filter\";\n\nexport default function OrderReceived ({enterpriseId }) {\n    \n    const [receiveOrder,{error}] = useMutation(RECEIVE_ITEMS)\n    const [date,setDate] = useState(null)\n    const { loading: incomingItemsLoading, data: incomingItemsData, refetch: incomingItemsRefetch } = useQuery(GET_INCOMING_ITEMS, {\n        variables: { enterpriseId:enterpriseId}\n    })\n    const [searchTerm,setSearchTerm] = useState(\"\")\n    const [orderNumberSelected,setOrderNumberSelected] = useState(false)\n\n    const incomingOrders = groupOrders(incomingItemsData.getOrderedItems)\n    \n    const handleFulfill = (e)=>{\n        console.log(\"this is the date input\",date)\n        incomingItemsRefetch()\n        const index = e.target.dataset.index;\n        const binLocation = e.target.parentNode.parentNode.lastElementChild.childNodes[0].value\n        const variables = {\n            enterpriseId:enterpriseId,\n            orderNumber:parseInt(e.target.dataset.orderNumber),\n            receivedDate:date,\n            binLocation\n        }\n        receiveOrder({variables})\n        incomingItemsRefetch()\n    }\n\n    const handleSelect = (e)=>{\n        const {order} = e.target.dataset\n        console.log(\"selected\",order)\n        setOrderNumberSelected(order)\n    }\n\n    const handleDateChange = (e)=>{\n        setDate(e.target.value)\n    }\n\n    if(incomingItemsLoading){\n        return(\n            <div>Loading...</div>\n        )\n    }\n\n    const searchedRows = incomingOrders.filter(p=>{\n        return stringifyProperties(p).toLowerCase().includes(searchTerm.toLowerCase())\n    })\n\n    return (\n        <div className=\"big-center-flex\">\n            <div className=\"table-top rec-order-tt\">\n            <h1>Receive Order</h1>\n            </div>\n\n            <input type=\"date\" onChange={handleDateChange}></input>\n            <div className=\"search-bar\">\n                <input onChange={(e)=>setSearchTerm(e.target.value)}/>\n            </div>\n            {incomingItemsLoading\n        ? <h2>Loading</h2>\n        :  <table  className=\"product-list-table\" id=\"order-received-table\"><thead>\n             <tr>\n                        <th>Order #</th>\n                        <th>Order Date</th>\n                        <th>Seller</th>\n                        <th>Items</th>\n                        <th>Receive!</th>\n                        <th>Bin #</th>\n                    </tr>\n        </thead>\n                <tbody>\n                    {incomingOrders.map((order,index)=>{\n                        return(<tr  className={searchedRows.includes(order)?\"\":\"hide\"} key={index} onClick={handleSelect} data-order={order.number}>\n                            <td data-order={order.number}>{order.number}</td>\n                            <td>{orderDate(order.date)}</td>\n                            <td>{order.supplier}</td>\n                            <td>{order.itemList}</td>\n                            <td><button data-order-number={order.number} data-index={index} onClick={handleFulfill}>Receive!</button></td>\n                            <td><input type=\"text\"></input></td>\n                        </tr>\n)\n                        })}\n\n                </tbody>\n            </table>}\n      \n      {orderNumberSelected?(<OrderDetails orderNumber={orderNumberSelected} enterpriseId={enterpriseId}/>):null}      \n        </div>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderGuide.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\StockGuide.js",["273","274","275"],"import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_STOCK_GUIDE, GET_CURRENT_STOCKS, GET_INCOMING_ITEMS } from \"../../utils/queries\";\nimport { SET_STOCK_GUIDE } from \"../../utils/mutations\";\nimport { groupItems, generatePurchaseTableData } from '../../utils/remodeledData'\n\nexport default function StockGuide(props) {\n  // Stock Guide Query\n  const { loading, data, refetch } = useQuery(GET_STOCK_GUIDE, {\n    variables: { enterpriseId: props.enterpriseId },\n  });\n\n  const { loading: currentStocksLoading, data: currentStocksData, refetch: currentRefetch } = useQuery(GET_CURRENT_STOCKS, {\n    variables: { enterpriseId: props.enterpriseId}\n})\nconst { loading: incomingItemsLoading, data: incomingItemsData, refetch: incomingRefetch } = useQuery(GET_INCOMING_ITEMS, {\n    variables: { enterpriseId: props.enterpriseId}\n})\n\n\nlet currentStocksGroups\nlet incomingItemsGroups\nlet stockGuide = [];\n\n// const [searchTerm,setSearchTerm] = useState(\"\")\n\nif(!loading && !currentStocksLoading && !incomingItemsLoading ){\n    refetch()\n    incomingRefetch()\n    currentRefetch()\n    currentStocksGroups = groupItems(currentStocksData.getCurrentStocks)\n    incomingItemsGroups = groupItems(incomingItemsData.getOrderedItems)\n    stockGuide = data.getStockGuide\n\n}\n  console.log(currentStocksGroups, incomingItemsGroups, stockGuide);\n\n  const getValues = (id, array) => {\n    let val\n    if (loading || currentStocksLoading || incomingItemsLoading) {\n      return\n    }\n    const value = array.filter(product => product.id === id)\n    if (value.length > 0) {\n      console.log('bing');\n      val = value[0].quantity\n    } else {\n      val = 0\n    }\n    return val\n  }\n  const stockDefault = (id) => {\n    if (loading) {\n        return\n    }\n    let val;\n    const filteredStockGuide = stockGuide.filter(product => product.product === id.toString())\n    val = filteredStockGuide[0]?.requiredStock || ''\n    return val;\n  };\n  // Mutation\n  let updatedStockGuide = [];\n  const [setNewPars, { error }] = useMutation(SET_STOCK_GUIDE);\n\n  // Change Handler\n  const handleInputChange = (e) => {\n    const index = e.target.dataset.index;\n    const newPar = {\n      product: props.orderGuide[index]._id,\n      requiredStock: parseInt(e.target.value),\n    };\n\n      updatedStockGuide = updatedStockGuide.filter((par) => {\n        return par.product !== newPar.product;\n      });\n \n    updatedStockGuide.push(newPar);\n    return updatedStockGuide;\n  };\n\n  // Submit\n  const handleSubmit = async () => {\n    console.log(\"wired\");\n    try {\n        await updatedStockGuide.forEach(async (product) => {\n            const variables = {\n                enterpriseId: props.enterpriseId,\n                product: product.product,\n                requiredStock: product.requiredStock\n            }\n            console.log('product', product);\n            console.log('variables', variables);\n            await setNewPars({\n                variables\n            })\n        })\n    } catch (err) {\n        console.error(err);\n    }\n  };\n  return (\n    <>\n      {loading && currentStocksLoading && incomingItemsLoading ? (\n        <h2>Loading...</h2>\n      ) : (\n        <table className=\"order-table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>SKU</th>\n              <th>Name</th>\n              <th>Description</th>\n              <th>MSRP</th>\n              <th>Category</th>\n              <th>Notes</th>\n              <th>Current</th>\n              <th>Incoming</th>\n              <th>Par</th>\n              {props.buttons ? <th>Rem</th> : null}\n            </tr>\n          </thead>\n          <tbody>\n            {props.orderGuide.map((product, index) => {\n              return (\n                <tr data-pid={product._id} key={index}>\n                  <td className=\"td-2\">{product.imageKey?(<img className='table-image' src={`/images/${product.imageKey}`}/>):null}</td>\n                  <td className=\"td-1\" data-pid={product._id}>{product.sku}</td>\n                  <td className=\"td-3\" data-pid={product._id}>{product.name}</td>\n                  <td className=\"td-3\" data-pid={product._id}>{product.description}</td>\n                  <td className=\"td-1\" data-pid={product._id}>${product.msrp}</td>\n                  <td className=\"td-1\" data-pid={product._id}>{product.category}</td>\n                  <td className=\"td-3\" data-pid={product._id}>{product.notes}</td>\n                  <td className=\"td-1\" data-pid={product._id}>{getValues(product._id, currentStocksGroups)}</td>\n                  <td className=\"td-1\" data-pid={product._id}>{getValues(product._id, incomingItemsGroups)}</td>\n                  <td className='td-1'data-pid={product._id}>\n                    <input className=\"td-1\"\n                      data-index={index}\n                      name=\"par\"\n                      type=\"number\"\n                      min={0}\n                      onChange={handleInputChange}\n                      defaultValue={stockDefault(product._id)}\n                    />\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n      <div>\n        <button className=\"order-submit\" type=\"submit\" onClick={handleSubmit}>\n          Set Pars\n        </button>\n      </div>\n    </>\n  );\n}\n","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\FullReport.js",["276","277"],"import { useQuery } from \"@apollo/client\"\nimport { QUERY_SINGLE_PRODUCT,PRODUCT_AVERAGES,GET_ENTERPRISE_BY_ID } from \"../../utils/queries\"\nimport { MonthBar } from \"./Charts/SalesByMonth\"\nimport \"./fullReport.css\"\nimport ProductDetails from \"./ProductDetails\"\nimport { StockPie } from \"./Charts/StockPie\"\nimport { Table } from \"../Table\"\nimport { MonthlyAnalysis } from \"./MonthlyAnalysis\"\nimport { useState } from \"react\"\n\nconst FullReportInside = ({enterpriseId,productId})=>{\n    console.log(enterpriseId,productId,\"these are the props\")\n    const {data,error,loading} = useQuery(QUERY_SINGLE_PRODUCT,{variables:{singleProductId:productId}})\n    const {data:avData,loading:avLoading} = useQuery(PRODUCT_AVERAGES,{variables:{enterpriseId,productId}})\n    if(loading||avLoading){\n        return(\n            <h2>Loading...</h2>\n            )\n        }\n    console.log(data)\n    const product = data.singleProduct\n    console.log(\"product\",product)\nreturn(\n    <main className=\"full-report\">\n\n    <div className=\"report-side-by-side\">\n        <section className=\"left\">\n       <h1>\n         {product.name}\n        </h1>\n        {product.imageKey?<img src={`/images/${product.imageKey}`}/>:null}\n        </section>\n        <section className=\"right\">\n        <ProductDetails enterpriseId={enterpriseId} productId={productId}/>\n\n        </section>\n    </div>\n    <div className=\"chart-cont\">\n        <h2>Purchase/Sale Quantity By Month</h2>\n        <MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"numberPurchased\",\"numberSold\"]}/>\n    </div>\n    <div className=\"chart-cont\">\n        <h2>Cost of Purchase/Sales Income By Month</h2>\n        <MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"totalCost\",\"totalIncome\",\"netSalesIncome\"]}/>\n    </div>\n    <div>\n        <MonthlyAnalysis enterpriseId={enterpriseId} presetProductId={productId}/>\n    </div>\n\n\n    <div>\n    <Table data={avData.productAverages} excludedProperties={[\"__typename\"]}/>\n    </div>\n\n    <div className=\"report-side-by-side\">\n        <section className=\"left chart-cont\">\n        <h2>Suppliers</h2>\n        <StockPie property={\"product\"} productId={productId} queryType={\"suppliers\"} name={\"supplier\"} number={\"quantity\"} enterpriseId={enterpriseId}/>\n        </section>\n        <section className=\"right chart-cont\">\n        <h2>Buyers</h2>\n        <StockPie property={\"product\"} productId={productId} queryType={\"buyers\"}  name={\"buyer\"} number={\"quantity\"} enterpriseId={enterpriseId}/>\n        </section>\n    </div>\n    </main>\n)\n\n}\n\nexport const FullReport = ({enterpriseId})=>{\n\n    const{loading: enterpriseLoading,data:enterpriseData} = useQuery(GET_ENTERPRISE_BY_ID,{\n        variables:{id:enterpriseId}\n    })\n    const [productId,setProductId] = useState(false)\n    if(enterpriseLoading){\n        return(<div>Loading</div>)\n    }\n    let products\n\n    if (!enterpriseLoading){\n        products = enterpriseData.getEnterpriseById.orderGuide;\n    }\n\n    const handleProductChange = (e)=>{\n        setProductId(e.target.value)\n    }\n\n    return(\n\n        <>\n                <div  className=\"product-selector-cont\">\n        <select value={productId} onChange={handleProductChange}>\n        {!productId?<option value={null}>Pick a Product</option>:null}\n            {products.map(p=>{\n                    return(\n                        <option value={p._id}>{p.name}</option>\n                    )\n            })}\n        </select>\n        </div>\n        {productId?(<FullReportInside enterpriseId={enterpriseId} productId={productId}/>):null}\n        </>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\ProductReport.js",["278"],"import {useQuery} from \"@apollo/client\"\nimport { useState } from \"react\"\nimport { GET_ENTERPRISE_BY_ID,PRODUCT_ANALYSIS } from \"../../utils/queries\"\nimport ProductDetails from \"./ProductDetails\"\nimport './productReport.css'\n\nexport default function ProductReport ({enterpriseId}){\n\n    const{loading: enterpriseLoading,data:enterpriseData} = useQuery(GET_ENTERPRISE_BY_ID,{\n        variables:{id:enterpriseId}\n    })\n    const [productId,setProductId] = useState(false)\n\n    let products;\n    if (!enterpriseLoading){\n        products = enterpriseData.getEnterpriseById.orderGuide;\n    }\n\n    if(enterpriseLoading){\n        return(<h1>Loading...</h1>)\n    }\n\n    const handleProductClick = (e)=>{\n        const productId = e.target.value\n        setProductId(productId)\n    }\n\n    return(\n\n        <div className=\"analysis-main\">\n\n        <div className=\"card analysis-header\">\n\n        <div>\n        <div className=\"table-top product-report\">\n            <h1>Product Report</h1>\n        </div>\n            </div>\n            </div>\n            <div className=\"product-selector-cont\">\n\n            <select defaultValue=\"Choose a Product\" placeholder=\"Choose a product\"  onChange={handleProductClick}>\n            <option selected value=\"\">Select a Product</option>\n            {products.map((product,index)=>{\n                return(<option data-product-id={product._id} value={product._id} >{product.name}</option>)\n            })}\n            </select>\n            </div>\n\n            {productId?<ProductDetails enterpriseId={enterpriseId} productId={productId}/>:null}\n        </div>\n\n    )\n\n\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\ReportingDashboard.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\MonthlyAnalysis.js",["279","280","281"],"import { useQuery } from \"@apollo/client\"\nimport { useState } from \"react\"\nimport { GET_MONTH_TO_MONTH } from \"../../utils/queries\"\nimport { Table } from \"../Table\"\nimport { t } from \"../../utils/translation/translator\"\nimport { GET_ENTERPRISE_BY_ID } from \"../../utils/queries\"\n\nexport const MonthlyAnalysis = ({enterpriseId,presetProductId})=>{\n    const [sales,setSales] = useState(true)\n    const [selectedProduct,setSelectedProduct] = useState(null)\n    const{loading: enterpriseLoading,data:enterpriseData} = useQuery(GET_ENTERPRISE_BY_ID,{\n        variables:{id:enterpriseId}\n    })\n    const variables = selectedProduct===\"all\"?{enterpriseId}:{enterpriseId,productId:(presetProductId || selectedProduct)}\n    console.log(variables)\n    const {data,loading,error}=useQuery(GET_MONTH_TO_MONTH,{variables})\n    \n    let products;\n    if (!enterpriseLoading){\n        products = enterpriseData.getEnterpriseById.orderGuide;\n    }\n    \n    if(loading){\n        return(\n            <div>Loading...</div>\n        )\n    }\n\n    const handleProductChange = (e)=>{\n        setSelectedProduct(e.target.value)\n    }\n\n    const addedData = [];\n    data.groupItemsByMonth.forEach(i=>{\n        const obj = {monthText:t(i.month),...i}\n        addedData.push(obj)\n    })\n\n    addedData.sort((a,b)=>{\n        return a.month-b.month\n    })\n    addedData.sort((a,b)=>{\n        return a.year-b.year\n    })\n\n    for (let i = 0;i<addedData.length;i++){\n        if(i===0){\n            addedData[i].startingStock = 0\n        }else{\n            addedData[i].startingStock = addedData[i-1].startingStock+addedData[i-1].numberPurchased-addedData[i-1].numberSold\n        }\n    }\n    for (let i = 0;i<addedData.length;i++){\n        if(i===(addedData.length-1)){\n            addedData[addedData.length-1].endingStock = addedData[i].startingStock+addedData[i].numberPurchased-addedData[i].numberSold\n        }else{\n            addedData[i].endingStock = addedData[i+1].startingStock\n        }\n    }\n\n\n    return(\n        <div>\n            {!presetProductId?(<div  className=\"product-selector-cont\">\n            <select value={selectedProduct} onChange={handleProductChange}>\n                <option value={\"all\"}>All Products</option>\n                {products.map(p=>{\n                    return(\n                        <option value={p._id}>{p.name}</option>\n                    )\n                })}\n            </select>\n            </div>):null}\n            <Table  data={addedData} excludedProperties={[\"__typename\",\"month\"]}/>\n        </div>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Dashboard.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\Charts.js",["282","283"],"import { dummyProductMonths } from \"./dummyData\"\nimport { useState } from \"react\"\nimport {MonthBar} from \"./Charts/SalesByMonth\"\nimport { GET_ENTERPRISE_BY_ID } from \"../../utils/queries\"\nimport { useQuery } from \"@apollo/client\"\nimport { t } from \"../../utils/translation/translator\"\nimport { StockPie } from \"./Charts/StockPie\"\nimport \"./charts.css\"\nexport const Charts = ({enterpriseId})=>{\n\nconst{loading: enterpriseLoading,data:enterpriseData} = useQuery(GET_ENTERPRISE_BY_ID,{\n        variables:{id:enterpriseId}\n    })\n\nconst [chart,selectChart] = useState(null)\nconst [productId,setProductId] = useState(false)\nconst [property,setProperty] = useState(null)\nconst [queryType,setQueryType] = useState(null)\nconst handleChartSelector = (e)=>{\n    const {chartName,property,queryType} = JSON.parse(e.target.value)\n    selectChart(chartName);\n    setProperty(property)\n    setQueryType(queryType)\n}\nlet products\nif (!enterpriseLoading){\n    products = enterpriseData.getEnterpriseById.orderGuide;\n}\n\nconst handleProductChange = (e)=>{\n    setProductId(e.target.value)\n}\n\nreturn(\n    <section className=\"chart-cont\">\n        <div  className=\"product-selector-cont\">\n        <select onChange={handleChartSelector}>\n            <option value={false}> Pick a Chart</option>\n            <option value={JSON.stringify({chartName:\"salesByMonth\",property:[\"numberSold\"]})}>Sales By Month</option>\n            <option value={JSON.stringify({chartName:\"purchasesByMonth\",property:[\"numberPurchased\"]})}>Purchases By Month</option>\n            <option value={JSON.stringify({chartName:\"activityByMonth\",property:[\"numberPurchased\",\"numberSold\"]})}>Total Activity By Month</option>\n            <option value={JSON.stringify({chartName:\"costByMonth\",property:[\"totalCost\"]})}>Cost By Month</option>\n            <option value={JSON.stringify({chartName:\"totalSales\",property:[\"totalIncome\"]})}>Gross Sales Income By Month</option>\n            <option value={JSON.stringify({chartName:\"netSalesIncome\",property:[\"totalCost\",\"totalIncome\",\"netSalesIncome\"]})}>Purchase/Sales Cashflow</option>\n            <option value={JSON.stringify({chartName:\"currentStocksPie\",property:null,queryType:\"current\"})}>Current Stocks</option>\n            <option value={JSON.stringify({chartName:\"pastSalesPie\",property:null,queryType:\"purchases\"})}>Past Purchases Product Breakdown</option>\n            <option value={JSON.stringify({chartName:\"pastPurchasesPie\",property:null,queryType:\"sales\"})}>Past Sales Product Breakdown</option>\n            <option value={JSON.stringify({chartName:\"pastSuppliersPie\",property:\"noLegend\",queryType:\"suppliers\"})}>Suppliers</option>\n            <option value={JSON.stringify({chartName:\"pastBuyersPie\",property:\"noLegend\",queryType:\"buyers\"})}>Buyers</option>\n        </select>\n        {property?(\n\n      \n            <select value={productId} onChange={handleProductChange}>\n                {!productId?<option value={null}>Pick a Product</option>:null}\n                {products.map(p=>{\n                    return(\n                        <option value={p._id}>{p.name}</option>\n                    )\n                })}\n            </select>\n          ):null\n        }\n        </div>\n        {!chart?<div>Pick a chart</div>:null}\n        {productId && chart===\"salesByMonth\"?<MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"numberSold\"]}/>:null}\n        {productId && chart===\"purchasesByMonth\"?<MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"numberPurchased\"]}/>:null}\n        {productId && chart===\"activityByMonth\"?<MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"numberPurchased\",\"numberSold\"]}/>:null}\n        {productId && chart===\"costByMonth\"?<MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"totalCost\"]}/>:null}\n        {productId && chart===\"totalSales\"?<MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"totalIncome\"]}/>:null}\n        {productId && chart===\"netSalesIncome\"?<MonthBar enterpriseId={enterpriseId} productId={productId} property={[\"totalCost\",\"totalIncome\",\"netSalesIncome\"]}/>:null}\n        {productId && chart===\"currentStocksPie\"?<StockPie productId={productId} queryType={queryType} setProperty={setProperty} name=\"product\" number={\"quantity\"} enterpriseId={enterpriseId}/>:null}\n        {productId && chart===\"pastSalesPie\"?<StockPie productId={productId} queryType={queryType} setProperty={setProperty} name=\"product\" number={\"quantity\"} enterpriseId={enterpriseId}/>:null}\n        {productId && chart===\"pastPurchasesPie\"?<StockPie productId={productId} queryType={queryType} setProperty={setProperty} name=\"product\" number={\"quantity\"} enterpriseId={enterpriseId}/>:null}\n        {productId && chart===\"pastSuppliersPie\"?<StockPie property={\"product\"} productId={productId} queryType={queryType} setProperty={setProperty} name={\"supplier\"} number={\"quantity\"} enterpriseId={enterpriseId}/>:null}\n        {productId && chart===\"pastBuyersPie\"?<StockPie property={\"product\"} productId={productId} queryType={queryType} setProperty={setProperty} name={\"buyer\"} number={\"quantity\"} enterpriseId={enterpriseId}/>:null}\n\n        \n         \n        {property && property!=\"noLegend\"?(\n            <section className=\"legend\">\n                {property.map(p=>{\n                return(<div className=\"legend-div\">\n                    <div className=\"legend-square\"></div>\n                    <span>{t(p)}</span>\n                </div>)})}\n            </section>\n\n        ):null}\n    </section>\n)\n\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\ProductGuide.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Navbar.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Header.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\mutations.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Users\\logout.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Tools\\DropBox.js",["284","285","286"],"import React, {useCallback} from \"react\"\nimport Dropzone from \"react-dropzone\"\nimport \"./DropBox.css\"\nimport { useState } from \"react\"\n\nexport const DropBox = ({imageKey,setImageKey})=>{\n\n  const [imageAdded,setImageAdded] = useState(false)\n\n  const handleDragEnter = (e)=>{\n    console.log(\"entering\")\n    e.preventDefault();\n    e.target.classList.add(\"highlight\")\n  }\n  const handleDragLeave = (e)=>{\n    e.preventDefault()\n    e.target.classList.remove(\"highlight\")\n  }\n\n  const handleDragOver = (e)=>{\n    console.log(\"over it\")\n    e.stopPropagation();\n    // e.target.classList.remove(\"highlight\")\n    e.preventDefault()\n  }\n\n  const uploadFile = async (file)=>{\n    let url = '/data/upload'\n    let formData = new FormData()\n  \n    formData.append('image', file)\n  \n    const resp = await fetch(url, {\n      method: 'POST',\n      body: formData\n    });\n    const data= await resp.json()\n    setImageAdded(true);\n    setImageKey(data.imagePath.split(\"/\")[2])\n    return data\n  }\n\n  const handleFiles = async (files)=>{\n    let data;\n    for (let i = 0;i<files.length;i++){\n      data = await uploadFile(files[i])\n    }\n    console.log(data);\n    return data\n  }\n\n  function handleDrop(e) {\n    e.preventDefault()\n    if(imageAdded){\n      return\n    }\n    let dt = e.dataTransfer\n    let files = dt.files  \n    handleFiles(files)\n    e.target.classList.remove(\"highlight\")\n\n  }\n\n  if(imageAdded&&imageKey){\n    return(\n      <div className=\"dropped-image-cont\"><img className=\"dropped-image\" src={`/images/${imageKey}`}/></div>\n    )\n  }\n  return(\n    <>\n    <div className=\"drop-zone-cont\">\n      <div className=\"drop-zone\" onDragEnter={handleDragEnter} onDragLeave={handleDragLeave} onDragOver={handleDragOver} onDrop={handleDrop}>\n      </div>\n    </div>\n    </>\n  )\n}\n\n","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\orderDate.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\OrderDetails.js",["287"],"import { useQuery } from \"@apollo/client\"\nimport { QUERY_ORDER_DETAILS } from \"../../utils/queries\"\nimport { Table } from \"../Table\"\n\nexport const OrderDetails = ({orderNumber,enterpriseId})=>{\n\n  const variables = {enterpriseId,orderNumber:parseInt(orderNumber)}\n\n    const {data,loading,error} = useQuery(QUERY_ORDER_DETAILS,{variables})\n    const input = data?.orderDetails\n    \n    if(loading){\n        return (\"Loading...\")\n    }\n    return (\n        <Table data={input}  excludedProperties={[\"__typename\",\"totalSales\",\"salePerUnit\",\"binLocation\"]}/>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\filter.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderModal.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Products\\ProductList.js",["288","289"],"import './ProductList.css'\nimport React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { ADD_TO_ORDERGUIDE } from '../../utils/mutations'\n\nexport default function ProductList (props) {\n    if(props.products) {\n        props.productsRefetch()\n    }\n    const [addProduct, { error }] = useMutation(ADD_TO_ORDERGUIDE)\n    const checkIfInList = (product,list)=>{\n        const match = list.filter(li=>{\n            return li._id===product._id\n        })\n        if (match.length!==0){\n            return true\n        }\n        else{\n            return false\n        }\n    }\n    const handleAdd = async (product) => {\n        let newList = [...props.orderGuide, product]\n        \n        props.setGuideState(newList)\n        try {\n            await addProduct({\n                variables: { enterpriseId: props.enterpriseId, productId: product._id }\n            })\n        } catch (err) {\n            console.error(err);\n        }  \n\n    }\n\n    return (\n        <div>\n            <table className='order-table'>\n                <thead>\n                    <tr className='order-header'>\n                        <th>Image</th>\n                        <th>SKU</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>MSRP</th>\n                        <th>Category</th>\n                        <th>Notes</th>\n                        {props.buttons?<th>➕</th> : null}\n\n                    </tr>\n                </thead>\n                    <tbody>\n                        {props.products.map((product, index) => {\n                        const check = checkIfInList(product, (props?.orderGuide||[]))\n                        if(!check) {\n                         return (\n                        <tr data-pid={product._id} key={index} >\n                            <td>{product.imageKey?(<img className='table-image' src={`/images/${product.imageKey}`} alt='product'/>):null}</td>\n                            <td data-pid={product._id}>{product.sku}</td>\n                            <td data-pid={product._id}>{product.name}</td>\n                            <td data-pid={product._id}>{product.description}</td>\n                            <td data-pid={product._id}>${product.msrp}</td>\n                            <td data-pid={product._id}>{product.category}</td>\n                            <td data-pid={product._id}>{product.notes}</td>\n                            {props.buttons?<td><button onClick={() => handleAdd(product)}>✔️</button></td> : null}\n\n                        </tr>\n                        )   \n                        }})}\n                    \n                    </tbody>\n                </table>\n        </div>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Orders\\OrderList.js",["290","291"],"import './OrderList.css'\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { REMOVE_FROM_ORDERGUIDE } from '../../utils/mutations'\n\nexport default function OrderList (props) {\n    if(props.orderGuide) {\n        props.enterpriseRefetch()\n    }\n    const [removeProduct, { error }] = useMutation(REMOVE_FROM_ORDERGUIDE)\n    const handleRemove = async (pid) => {\n        const newList = props.orderGuide.filter((product) => {\n            return product._id !== pid\n        })\n        props.setGuideState(newList)\n        try {\n            await removeProduct({\n                variables: { enterpriseId: props.enterpriseId, productId: pid }\n            })\n        } catch (err) {\n            console.error(err);\n        }\n    }\n    return (\n        <div>\n            <table className='order-table'>\n                <thead>\n                    <tr>\n                        <th>Image</th>\n                        <th>SKU</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>MSRP</th>\n                        <th>Category</th>\n                        <th>Notes</th>\n                        {props.buttons?<th>➖</th> : null}\n                    </tr>\n                </thead>\n                    <tbody>\n                    {props.orderGuide.map((product, index) => {\n                        return (\n                        <tr data-pid={product._id} key={index}>\n                            <td>{product.imageKey?(<img className='table-image' src={`/images/${product.imageKey}`}/>):null}</td>\n                            <td data-pid={product._id}>{product.sku}</td>\n                            <td data-pid={product._id}>{product.name}</td>\n                            <td data-pid={product._id}>{product.description}</td>\n                            <td data-pid={product._id}>${product.msrp}</td>\n                            <td data-pid={product._id}>{product.category}</td>\n                            <td data-pid={product._id}>{product.notes}</td>\n                            {props.buttons?<td><button onClick={() => handleRemove(product._id)} data-pid={product._id}>❌</button></td> : null}\n                        </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n        </div>\n    )\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\dummyData.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Layout\\Icon.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\ProductDetails.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\Charts\\SalesByMonth.js",["292","293","294","295","296"],"import {Bar} from \"react-chartjs-2\"\nimport {Chart as Chartjs} from \"chart.js/auto\"\nimport { dummyProductMonths } from \"../dummyData\"\nimport ChartistGraph from 'react-chartist';\nimport \"./charts.css\";\nimport { GET_MONTH_TO_MONTH } from \"../../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport { calculateAdditionalPropertiesForMonth } from \"../../../utils/remodeledData\"\nimport Chartist from \"chartist\"\n\nexport const MonthBar = ({enterpriseId,productId,property})=>{\n\n    let variables;\n    if(productId){\n        variables = {enterpriseId,productId}\n    }else{\n        variables = {enterpriseId}\n    }\n    const {data:queryData,loading,error} = useQuery(GET_MONTH_TO_MONTH,{variables})\n\n    if(loading){\n        return(\n            <div>\n                Loading...\n            </div>\n        )\n    }\n\n    let addedData = [];\n    queryData.groupItemsByMonth.forEach(i=>{\n        const obj = {...i,month:i.month+1}\n        addedData.push(obj)\n    })\n\n    addedData = calculateAdditionalPropertiesForMonth(addedData)\n\n    addedData.sort((a,b)=>{\n        return a.month-b.month\n    })\n    addedData.sort((a,b)=>{\n        return a.year-b.year\n    })\n\n    console.log(addedData)\n\n    const data = {\n        // A labels array that can contain any sort of values\n        labels: addedData.map(m=>`${m.month}/${m.year%100}`),\n        // Our series array that contains series objects or in this case series data arrays\n        series: property.map(p=>{\n            return addedData.map(m=>m[p])\n        })\n      };\n\n\n    const options = {\n        high: findMax(data.series.map(e=>findMax(e))),\n        width:\"95vw\",\n        axisY:{\n            position:\"start\",\n            labelOffset: {\n                x: 0,\n                y: 0\n              },\n            scaleMinSpace:50,\n            scaleMaxSpace:50,\n            },\n        }\n\n\n\n    return (\n        <div>\n            <ChartistGraph data={data} options={options} type=\"Bar\"         \n            />\n        </div>\n    )\n\n}\n\nfunction findMax(arr){\n    console.log(arr)\n    return arr.reduce((a,b)=>{\n        return a>b?a:b\n},0)\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Reporting\\Charts\\StockPie.js",["297"],"import ChartistGraph from 'react-chartist';\nimport { PAST_BUYERS,CURRENT_STOCK_QUANTITIES,PAST_SALES_QUANTITIES,ALL_PURCHASES, PAST_SUPPLIERS } from '../../../utils/queries';\nimport { useQuery } from '@apollo/client';\nimport { otherizeArray } from '../../../utils/remodeledData';\nimport \"./charts.css\"\nexport const StockPie = ({enterpriseId,setProperty,queryType,name,number,productId})=>{\n    console.log(\"name\",name)\n\n    const queries = {\n        current:{name:CURRENT_STOCK_QUANTITIES,function:\"currentStocksQuantity\"},\n        sales:{name:PAST_SALES_QUANTITIES,function:\"pastSalesQuantity\"},\n        purchases:{name:ALL_PURCHASES,function:\"allPastPurchases\"},\n        suppliers:{name:PAST_SUPPLIERS,function:\"pastSuppliers\",variables:{productId}},\n        buyers:{name:PAST_BUYERS,function:\"pastBuyers\",variables:{productId}}\n    }\n    console.log(queries[queryType].name)\n    const {data:queryData,error,loading} = useQuery(queries[queryType].name,{variables:{enterpriseId,...queries[queryType].variables}})\n\nlet addedData;\n\nconsole.log(queryData)\n\n\nif(loading){\n    return (\n        <div>Loading...</div>\n        )\n    }\n    addedData = queryData?.[queries[queryType].function]\n    addedData = otherizeArray(addedData,4,name,number)\nconsole.log(addedData)\nconst data = {\n    labels: addedData.map(a=>a[name]),\n    series: addedData.map(a=>{\n            a= {...a}\n            a.product = a[name]\n            console.log(a)\n            return {\n                name:a[name],\n                value:a[number]\n            }})\n}\n\n\nconst options = {\n    width:\"400px\",\n    showLabel:true,\n    donut:true,\n    donutWidth:\"150\",\n    donutSolid:true\n}\n\nreturn(\n    <div className='pie'>\n    <ChartistGraph data={data} options={options} type=\"Pie\"/>\n    </div>\n)\n\n}","C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\translation\\translator.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\components\\Table\\index.js",[],"C:\\Users\\jcfar\\OneDrive\\Desktop\\big\\inventory-plus\\client\\src\\utils\\translation\\translationLibrary.js",["298","299","300"],"export const translations = {\n    productName:\"Product\",\n    units:\"Units\",\n    binLocation:\"Bin\",\n    totalCost:\"Total Cost\",\n    costPerUnit:\"Cost/Unit\",\n    sku:\"SKU\",\n    totalSales:\"Total Sales\",\n    salePerUnit:\"Sales Price/Unit\",\n    __typename:\"\",\n    name:\"Product Name\",\n    description:\"Description\",\n    msrp:\"MSRP\",\n    category:\"Category\",\n    numberPurchased:\"# Purchased\",\n    numberIncoming:\"# Incoming\",\n    numberInStock:\"# in Stock\",\n    numberOutgoing:\"# Outgoing\",\n    numberSold:\"# Sold\",\n    numberFulfilled:\"# Fulfilled\",\n    totalSalesRevenue:\"Sales Revenue\",\n    averageSalesPrice:\"Sales Price/Unit\",\n    averageCost:\"Cost/Unit\",\n    monthText:\"Month\",\n    0:\"Jan\",\n    1:\"Feb\",\n    2:\"Mar\",\n    3:\"Apr\",\n    4:\"May\",\n    5:\"Jun\",\n    6:\"Jul\",\n    7:\"Aug\",\n    8:\"Sep\",\n    9:\"Oct\",\n    10:\"Nov\",\n    11:\"Dec\",\n    year:\"Year\",\n    totalIncome:\"Total Income\",\n    startingStock:\"Start Stock\",\n    endingStock:\"End Stock\",\n    notes:\"Notes\",\n    \"__typename\":\" \",\n    numberPurchased:\"# Purchased\",\n    numberSold: \"# Sold\",\n    netSalesIncome: \"Purchase/Sales Cashflow\",\n    period:\"Averages\"\n}\n\nconst converters = []\n\nclass Converter{\n    constructor(name,conversionFunction){\n        this.name = name\n        this.properties = []\n        this.conversionFunction = conversionFunction\n        converters.push(this)\n    }\n    addProperty(property){\n        this.properties.push(property)\n    }\n    convertValue(property,value){\n        if(!this.properties.includes(property)||(typeof value !== \"number\")){\n            return value\n        }\n            return this.conversionFunction(value)\n    }\n}\n\nconst decimalDollars = new Converter(\"decimalDollars\",(value)=>`$${separator(value.toFixed(2))}`)\ndecimalDollars.addProperty(\"costPerUnit\")\ndecimalDollars.addProperty(\"averageSalesPrice\")\ndecimalDollars.addProperty(\"averageCost\")\n\nconst wholeDollars = new Converter(\"wholeDollars\",(value)=>`$${separator(Math.round(value))}`)\nwholeDollars.addProperty(\"totalIncome\")\nwholeDollars.addProperty(\"totalCost\")\nwholeDollars.addProperty(\"totalSalesRevenue\")\n\nexport const conversions = converters\n\nfunction separator(numb) {\n    var str = numb.toString().split(\".\");\n    str[0] = str[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return str.join(\".\");\n}",{"ruleId":"301","severity":1,"message":"302","line":145,"column":9,"nodeType":"303","messageId":"304","endLine":145,"endColumn":24},{"ruleId":"305","severity":1,"message":"306","line":64,"column":5,"nodeType":"307","endLine":64,"endColumn":16,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":136,"column":9,"nodeType":"311","messageId":"312","endLine":136,"endColumn":28},{"ruleId":"309","severity":1,"message":"313","line":11,"column":25,"nodeType":"311","messageId":"312","endLine":11,"endColumn":30},{"ruleId":"314","severity":1,"message":"315","line":12,"column":26,"nodeType":"316","messageId":"304","endLine":12,"endColumn":28},{"ruleId":"309","severity":1,"message":"313","line":9,"column":25,"nodeType":"311","messageId":"312","endLine":9,"endColumn":30},{"ruleId":"309","severity":1,"message":"317","line":10,"column":29,"nodeType":"311","messageId":"312","endLine":10,"endColumn":39},{"ruleId":"309","severity":1,"message":"318","line":10,"column":48,"nodeType":"311","messageId":"312","endLine":10,"endColumn":61},{"ruleId":"309","severity":1,"message":"319","line":10,"column":68,"nodeType":"311","messageId":"312","endLine":10,"endColumn":79},{"ruleId":"309","severity":1,"message":"320","line":23,"column":10,"nodeType":"311","messageId":"312","endLine":23,"endColumn":20},{"ruleId":"309","severity":1,"message":"321","line":23,"column":21,"nodeType":"311","messageId":"312","endLine":23,"endColumn":34},{"ruleId":"309","severity":1,"message":"322","line":36,"column":22,"nodeType":"311","messageId":"312","endLine":36,"endColumn":31},{"ruleId":"309","severity":1,"message":"323","line":59,"column":15,"nodeType":"311","messageId":"312","endLine":59,"endColumn":19},{"ruleId":"309","severity":1,"message":"313","line":31,"column":21,"nodeType":"311","messageId":"312","endLine":31,"endColumn":26},{"ruleId":"309","severity":1,"message":"323","line":31,"column":28,"nodeType":"311","messageId":"312","endLine":31,"endColumn":32},{"ruleId":"309","severity":1,"message":"323","line":44,"column":15,"nodeType":"311","messageId":"312","endLine":44,"endColumn":19},{"ruleId":"324","severity":1,"message":"325","line":5,"column":47,"nodeType":"326","messageId":"304","endLine":5,"endColumn":49},{"ruleId":"309","severity":1,"message":"327","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":18},{"ruleId":"309","severity":1,"message":"328","line":3,"column":17,"nodeType":"311","messageId":"312","endLine":3,"endColumn":23},{"ruleId":"309","severity":1,"message":"329","line":4,"column":8,"nodeType":"311","messageId":"312","endLine":4,"endColumn":12},{"ruleId":"309","severity":1,"message":"313","line":11,"column":24,"nodeType":"311","messageId":"312","endLine":11,"endColumn":29},{"ruleId":"309","severity":1,"message":"323","line":16,"column":15,"nodeType":"311","messageId":"312","endLine":16,"endColumn":19},{"ruleId":"309","severity":1,"message":"330","line":13,"column":23,"nodeType":"311","messageId":"312","endLine":13,"endColumn":35},{"ruleId":"309","severity":1,"message":"331","line":13,"column":42,"nodeType":"311","messageId":"312","endLine":13,"endColumn":55},{"ruleId":"309","severity":1,"message":"332","line":14,"column":24,"nodeType":"311","messageId":"312","endLine":14,"endColumn":37},{"ruleId":"309","severity":1,"message":"333","line":19,"column":11,"nodeType":"311","messageId":"312","endLine":19,"endColumn":15},{"ruleId":"334","severity":1,"message":"335","line":45,"column":17,"nodeType":"336","endLine":45,"endColumn":81},{"ruleId":"309","severity":1,"message":"313","line":12,"column":27,"nodeType":"311","messageId":"312","endLine":12,"endColumn":32},{"ruleId":"309","severity":1,"message":"337","line":29,"column":15,"nodeType":"311","messageId":"312","endLine":29,"endColumn":20},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","replacedBy":"341"},{"ruleId":"309","severity":1,"message":"323","line":22,"column":33,"nodeType":"311","messageId":"312","endLine":22,"endColumn":37},{"ruleId":"309","severity":1,"message":"323","line":43,"column":21,"nodeType":"311","messageId":"312","endLine":43,"endColumn":25},{"ruleId":"309","severity":1,"message":"313","line":19,"column":25,"nodeType":"311","messageId":"312","endLine":19,"endColumn":30},{"ruleId":"309","severity":1,"message":"337","line":43,"column":15,"nodeType":"311","messageId":"312","endLine":43,"endColumn":20},{"ruleId":"334","severity":1,"message":"335","line":125,"column":69,"nodeType":"336","endLine":125,"endColumn":135},{"ruleId":"309","severity":1,"message":"313","line":19,"column":24,"nodeType":"311","messageId":"312","endLine":19,"endColumn":29},{"ruleId":"334","severity":1,"message":"335","line":169,"column":69,"nodeType":"336","endLine":169,"endColumn":135},{"ruleId":"309","severity":1,"message":"342","line":9,"column":10,"nodeType":"311","messageId":"312","endLine":9,"endColumn":11},{"ruleId":"309","severity":1,"message":"313","line":14,"column":26,"nodeType":"311","messageId":"312","endLine":14,"endColumn":31},{"ruleId":"309","severity":1,"message":"337","line":27,"column":15,"nodeType":"311","messageId":"312","endLine":27,"endColumn":20},{"ruleId":"309","severity":1,"message":"343","line":5,"column":22,"nodeType":"311","messageId":"312","endLine":5,"endColumn":47},{"ruleId":"309","severity":1,"message":"313","line":63,"column":24,"nodeType":"311","messageId":"312","endLine":63,"endColumn":29},{"ruleId":"334","severity":1,"message":"335","line":126,"column":59,"nodeType":"336","endLine":126,"endColumn":125},{"ruleId":"309","severity":1,"message":"313","line":13,"column":17,"nodeType":"311","messageId":"312","endLine":13,"endColumn":22},{"ruleId":"334","severity":1,"message":"335","line":31,"column":27,"nodeType":"336","endLine":31,"endColumn":69},{"ruleId":"309","severity":1,"message":"344","line":3,"column":31,"nodeType":"311","messageId":"312","endLine":3,"endColumn":47},{"ruleId":"309","severity":1,"message":"345","line":9,"column":12,"nodeType":"311","messageId":"312","endLine":9,"endColumn":17},{"ruleId":"309","severity":1,"message":"346","line":9,"column":18,"nodeType":"311","messageId":"312","endLine":9,"endColumn":26},{"ruleId":"309","severity":1,"message":"313","line":16,"column":25,"nodeType":"311","messageId":"312","endLine":16,"endColumn":30},{"ruleId":"309","severity":1,"message":"347","line":1,"column":10,"nodeType":"311","messageId":"312","endLine":1,"endColumn":28},{"ruleId":"324","severity":1,"message":"348","line":80,"column":30,"nodeType":"326","messageId":"304","endLine":80,"endColumn":32},{"ruleId":"309","severity":1,"message":"349","line":1,"column":16,"nodeType":"311","messageId":"312","endLine":1,"endColumn":27},{"ruleId":"309","severity":1,"message":"350","line":2,"column":8,"nodeType":"311","messageId":"312","endLine":2,"endColumn":16},{"ruleId":"334","severity":1,"message":"335","line":66,"column":43,"nodeType":"336","endLine":66,"endColumn":103},{"ruleId":"309","severity":1,"message":"313","line":9,"column":25,"nodeType":"311","messageId":"312","endLine":9,"endColumn":30},{"ruleId":"309","severity":1,"message":"313","line":10,"column":26,"nodeType":"311","messageId":"312","endLine":10,"endColumn":31},{"ruleId":"351","severity":1,"message":"352","line":53,"column":62,"nodeType":"353","messageId":"354","endLine":53,"endColumn":64},{"ruleId":"309","severity":1,"message":"313","line":10,"column":29,"nodeType":"311","messageId":"312","endLine":10,"endColumn":34},{"ruleId":"334","severity":1,"message":"335","line":43,"column":52,"nodeType":"336","endLine":43,"endColumn":118},{"ruleId":"309","severity":1,"message":"355","line":1,"column":9,"nodeType":"311","messageId":"312","endLine":1,"endColumn":12},{"ruleId":"309","severity":1,"message":"356","line":2,"column":18,"nodeType":"311","messageId":"312","endLine":2,"endColumn":25},{"ruleId":"309","severity":1,"message":"347","line":3,"column":10,"nodeType":"311","messageId":"312","endLine":3,"endColumn":28},{"ruleId":"309","severity":1,"message":"357","line":9,"column":8,"nodeType":"311","messageId":"312","endLine":9,"endColumn":16},{"ruleId":"309","severity":1,"message":"313","line":19,"column":35,"nodeType":"311","messageId":"312","endLine":19,"endColumn":40},{"ruleId":"309","severity":1,"message":"313","line":17,"column":27,"nodeType":"311","messageId":"312","endLine":17,"endColumn":32},{"ruleId":"301","severity":1,"message":"358","line":42,"column":5,"nodeType":"303","messageId":"304","endLine":42,"endColumn":17},{"ruleId":"301","severity":1,"message":"359","line":43,"column":5,"nodeType":"303","messageId":"304","endLine":43,"endColumn":20},{"ruleId":"301","severity":1,"message":"360","line":44,"column":5,"nodeType":"303","messageId":"304","endLine":44,"endColumn":15},"no-dupe-keys","Duplicate key '--middle-dark'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleThemeChange' and 'themeLoading'. Either include them or remove the dependency array. If 'handleThemeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["361"],"no-unused-vars","'handleHeaderRefresh' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'toggleData' is assigned a value but never used.","'toggleLoading' is assigned a value but never used.","'toggleError' is assigned a value but never used.","'registered' is assigned a value but never used.","'setRegistered' is assigned a value but never used.","'loginData' is assigned a value but never used.","'data' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'useQuery' is defined but never used.","'useRef' is defined but never used.","'auth' is defined but never used.","'setThemeData' is assigned a value but never used.","'setThemeError' is assigned a value but never used.","'addAvatarData' is assigned a value but never used.","'resp' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'index' is assigned a value but never used.","no-native-reassign",["362"],"no-negated-in-lhs",["363"],"'t' is defined but never used.","'generatePurchaseTableData' is defined but never used.","'PRODUCT_ANALYSIS' is defined but never used.","'sales' is assigned a value but never used.","'setSales' is assigned a value but never used.","'dummyProductMonths' is defined but never used.","Expected '!==' and instead saw '!='.","'useCallback' is defined but never used.","'Dropzone' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Bar' is defined but never used.","'Chartjs' is defined but never used.","'Chartist' is defined but never used.","Duplicate key '__typename'.","Duplicate key 'numberPurchased'.","Duplicate key 'numberSold'.",{"desc":"364","fix":"365"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [handleThemeChange, themeData, themeLoading]",{"range":"366","text":"367"},[2363,2374],"[handleThemeChange, themeData, themeLoading]"]
